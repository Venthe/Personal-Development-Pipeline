version: '3.0'
services:
  #gerrit-to-bus-mediator:
  #  build: ./Gerrit-To-Bus-Mediator/
  #  ports:
  #    - "8084:8080"
  #  volumes:
  #    - "./Gerrit-To-Bus-Mediator/dist/index.mjs:/workdir/index.mjs"
  #  entrypoint:
  #    - node
  #    - "index.mjs"
  #  environment:
  #    JENKINS_TOKEN: '11889d59e14e5e05499a2f66be1b03c4ef'
  #    JENKINS_USER: 'admin'
  #    JENKINS_URL: 'http://jenkins:8080'
  #    SERVER_PORT: '8080'
  gerrit:
    hostname: gerrit
    container_name: gerrit
    image: "docker.io/gerritcodereview/gerrit:3.7.0"
    environment:
      HTTPD_LISTEN_URL: 'http://gerrit:8080'
    volumes:
      - "git-volume:/var/gerrit/git"
      - "index-volume:/var/gerrit/index"
      - "cache-volume:/var/gerrit/cache"
    ports:
      - "29418:29418"
      - "8080:8080"
  # docker ps | grep jenkins | awk '{print $1}' | xargs -I{} docker exec -i {} cat /var/jenkins_home/secrets/initialAdminPassword
  jenkins:
    build:
      context: ./Jenkins
    container_name: jenkins
    hostname: jenkins
    restart: on-failure
    user: root
    privileged: true
    environment:
      CASC_JENKINS_CONFIG: /var/jenkins_home/casc_configs
      JAVA_OPTS: -Dorg.jenkinsci.plugins.durabletask.BourneShellScript.LAUNCH_DIAGNOSTICS=true
    volumes:
      - "jenkins-home:/var/jenkins_home"
      - "./Jenkins/configuration.jcasc.yml:/var/jenkins_home/casc_configs/jenkins.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./Jenkins/Pipeline/src/main/groovy/eu/venthe/jenkins/pipelines:/var/jenkins_home/pipeline:ro"
    ports:
      - "50000:50000"
      - "8082:8080"
  nexus:
    hostname: nexus
    container_name: nexus
    image: "docker.io/sonatype/nexus3:3.43.0"
    restart: on-failure
    ports:
      - "8081:8081"
      - "5000:5000"
    volumes:
      - "nexus-data:/nexus-data"
  #curl --silent --header "X-Vault-Token:vault_development_token" http://localhost:8200/v1/secret/data/example | jq '.data.data'
  vault:
    image: "docker.io/library/vault:1.12.2"
    cap_add:
      - IPC_LOCK
    entrypoint: /mnt/init/init.sh
    # Original command parameters are no longer relevant
    command:
      - "-dev"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "vault_development_token"
      # Accessible at http://localhost:8200/ui
      VAULT_LOCAL_CONFIG: '{"ui": true}'
#      VAULT_DEV_LISTEN_ADDRESS: localhost:8200
      VAULT_ADDR: "http://localhost:8200"
      APPLICATION_NAME: "pipeline"
    ports:
      - "8200:8200"
    volumes:
      - "./Vault/:/mnt/init"

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - broker
    ports:
      - "8090:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092

  schema-registry:
    depends_on:
      - broker
    container_name: schema-registry
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: SSL://broker:29092
      SCHEMA_REGISTRY_HOST_NAME: localhost
      SCHEMA_REGISTRY_LISTENERS: http://localhost:8081
      SCHEMA_REGISTRY_DEBUG: true
    ports:
      - "8085:8081"
    image: confluentinc/cp-schema-registry:7.3.0

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
volumes:
  git-volume: {}
  index-volume: {}
  cache-volume: {}
  jenkins-home: {}
  nexus-data: {}
  #mariadb:
  #  image: "docker.io/library/mariadb:10.9.4"
  #  environment:
  #    MARIADB_USER: user
  #    MARIADB_PASSWORD: secret
  #    MARIADB_ROOT_PASSWORD: secret
  #    MARIADB_DATABASE: common
  #keycloak:
  #  image: "docker.io/jboss/keycloak:16.1.1"
  #  restart: on-failure
  # rocketchat:
  #   image: "docker.io/library/rocket.chat:5.2.0"
  #   restart: on-failure
  #   ports:
  #     - "8083:3000"
  #   environment:
  #     # local
  #     MONGO_OPLOG_URL: mongodb://mongodb:27017/rocketchat
  # mongodb:
  #   image: "docker.io/library/mongo:6.0.2"
  #   restart: on-failure
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: secret
  # mongo-express:
  #   image: "docker.io/library/mongo-express:1.0.0-alpha.4"
  #   restart: unless-stopped
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: secret
  #     ME_CONFIG_MONGODB_URL: mongodb://mongodb:27017
  #     # Name                            | Default         | Description
  #     # --------------------------------|-----------------|------------
  #     # ME_CONFIG_BASICAUTH_USERNAME    | ''              | mongo-express web username
  #     # ME_CONFIG_BASICAUTH_PASSWORD    | ''              | mongo-express web password
  #     # ME_CONFIG_MONGODB_ENABLE_ADMIN  | 'true'          | Enable admin access to all databases. Send strings: `"true"` or `"false"`
  #     # ME_CONFIG_MONGODB_ADMINUSERNAME | ''              | MongoDB admin username
  #     # ME_CONFIG_MONGODB_ADMINPASSWORD | ''              | MongoDB admin password
  #     # ME_CONFIG_MONGODB_PORT          | 27017           | MongoDB port
  #     # ME_CONFIG_MONGODB_SERVER        | 'mongo'         | MongoDB container name. Use comma delimited list of host names for replica sets.
  #     # ME_CONFIG_OPTIONS_EDITORTHEME   | 'default'       | mongo-express editor color theme, [more here](http://codemirror.net/demo/theme.html)
  #     # ME_CONFIG_REQUEST_SIZE          | '100kb'         | Maximum payload size. CRUD operations above this size will fail in [body-parser](https://www.npmjs.com/package/body-parser).
  #     # ME_CONFIG_SITE_BASEURL          | '/'             | Set the baseUrl to ease mounting at a subdirectory. Remember to include a leading and trailing slash.
  #     # ME_CONFIG_SITE_COOKIESECRET     | 'cookiesecret'  | String used by [cookie-parser middleware](https://www.npmjs.com/package/cookie-parser) to sign cookies.
  #     # ME_CONFIG_SITE_SESSIONSECRET    | 'sessionsecret' | String used to sign the session ID cookie by [express-session middleware](https://www.npmjs.com/package/express-session).
  #     # ME_CONFIG_SITE_SSL_ENABLED      | 'false'         | Enable SSL.
  #     # ME_CONFIG_SITE_SSL_CRT_PATH     | ''              | SSL certificate file.
  #     # ME_CONFIG_SITE_SSL_KEY_PATH     | ''              | SSL key file.
  # #postgresdb:
  # #  image: "docker.io/library/postgres:15.1"
#  dependencies:
#    image: httpd:2.4
#    ports:
#      - "8090:8080"
#    volumes:
#      - ./dependencies:/usr/local/apache2/htdocs/
#  actions:
#    image: httpd:2.4
#    ports:
#      - "8090:8080"
#    volumes:
#      - ./Jenkins-Actions/Pipeline/src/main/groovy/eu/venthe/jenkins:/usr/local/apache2/htdocs/
#  project:
#    image: httpd:2.4
#    ports:
#      - "8090:8080"
#    volumes:
#      - ./Sample-Project:/usr/local/apache2/htdocs/
