---
- name: Set up control plane
  gather_facts: false
  become: true
  hosts: all
  vars_prompt:
    - name: chown_user
      default: vagrant
      private: false
    - name: taint
      prompt: Should taint node?
      private: false
      default: false
    - name: node
      default: main
      prompt: node name
      private: false
    - name: adapter_id
      default: 1
      private: false
    - name: cluster_domain
      default: cluster.local
      private: false
  tasks:
    # Do this step in gather facts
    - name: "Get IP of adatper {{ adapter_id }}"
      shell: set -o pipefail && hostname -I | xargs -n1 echo | cat | sed -n "{{ adapter_id }}p"
      args:
        executable: "/bin/bash"
      register: ips
    - name: Create a directory if it does not exist
      file:
        mode: 0774
        owner: 'root'
        path: "{{ item }}"
        state: directory
      with_items:
        # - /etc/default/kubelet
        - /var/lib/kubelet
    # - name: Configure node ip
    #   lineinfile:
    #     create: true
    #     path: /etc/default/kubelet
    #     line: KUBELET_EXTRA_ARGS=--node-ip={{ ips.stdout }}
    - name: Update kubelet config with cgroup
      blockinfile:
        create: true
        dest: /var/lib/kubelet/config.yaml
        block: |
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          cgroupDriver: systemd
        owner: '{{ chown_user }}'
    - name: Restart kubelet
      become: true
      service:
        name: kubelet
        daemon_reload: true
        state: restarted
    # Fixme: Run this only when necessary
    #  kubeadm config images list -o jsonpath='{range .images[*]}{@}{"\n"}{end}'
    #  Store available images as a fact?
    - name: Pull config images
      become: true
      command: kubeadm config images pull
    # Fixme: Run this only when necessary
    - name: Initialize the Kubernetes cluster using kubeadm
      become: true
      # --apiserver-advertise-address="192.168.50.10"
      #  The IP address the API Server will advertise it's listening on.
      #  If not set the default network interface will be used
      # --contorl-plane-endpoint
      #  Specify a stable IP address or DNS name for the control plane.
      # --apiserver-cert-extra-sans="192.168.50.10"
      #  Optional extra Subject Alternative Names (SANs) to use for the API
      #  Server serving certificate. Can be both IP addresses and DNS names.
      # --node-name {{ node }}
      #  Specify the node name.
      # --pod-network-cidr=192.168.0.0/16
      #  Specify range of IP addresses for the pod network. If set, the
      #  control plane will automatically allocate CIDRs for every node.
      shell:
        cmd: |
          kubeadm init \
              --node-name={{ node }} \
              --apiserver-advertise-address={{ ips.stdout }} \
              --apiserver-cert-extra-sans={{ ips.stdout }} \
              --pod-network-cidr=10.0.0.0/16 \
              --service-cidr=10.196.0.0/16 \
              --service-dns-domain="{{ cluster_domain }}" \
              --skip-token-print
    - name: Create .kube directory for vagrant user
      become: true
      file:
        path: "/home/{{chown_user}}/.kube"
        state: directory
        mode: '0700'
        owner: '{{ chown_user }}'
    - name: Setup kubeconfig for vagrant user
      become: true
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        owner: '{{ chown_user }}'
        remote_src: true
        mode: '0700'
    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command
      changed_when: false
      # Change to fetch
    - name: Copy join command to local file
      delegate_to: localhost
      become: false
      copy:
        content: "{{ join_command.stdout_lines[0] }}"
        mode: '0777'
        dest: "./join-command"
    - name: Untaint node
      command: "kubectl taint node {{ node }} node-role.kubernetes.io/master-"
      when: not taint
...
