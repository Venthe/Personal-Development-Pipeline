VAGRANTFILE_API_VERSION ||= "2"
IMAGE_NAME ||= "generic/ubuntu2010"
IMAGE_VERSION ||= "3.1.10"
DEPLOYMENT_NAME ||= "test-k8s"
SUBNET_IP_BASE ||= "192.168.3"
CONTAINERD_VERSION ||= "1.3.9-1"
KUBERNETES_VERSION ||= "1.19.4-00"

# TODO: Explore HA control plane
#  Currently limited to 1
MAIN_NODE_COUNT ||= 1
MAIN_NODE_NAME ||= "#{DEPLOYMENT_NAME}-main-node"
MAIN_NODE_MEMORY ||= 2048
MAIN_NODE_CPU_COUNT ||= 2
MAIN_NODE_TAINT ||= true
MAIN_NODE_ADAPTER_ID ||= 1

WORKER_NODE_COUNT ||= 3
WORKER_NODE_NAME ||= "#{DEPLOYMENT_NAME}-worker-node"
WORKER_NODE_MEMORY ||= 8192
WORKER_NODE_CPU_COUNT ||= 4

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.vm.box = IMAGE_NAME
    config.vm.box_version = IMAGE_VERSION

    config.vm :hyperv do |hyperv|
        hyperv.provider.enable_virtualization_extensions = true
        hyperv.provider.linked_clone = true
        hyperv.synced_folder ".", "/vagrant", disabled: true
        hyperv.provider "hyperv"
        hyperv.provider.ip_address_timeout = 240
    end

    (1..MAIN_NODE_COUNT).each do |i|
        config.vm.define "#{MAIN_NODE_NAME}-#{i}" do |mainNode|
            mainNode.vm.provider :virtualbox do |virtualbox|
                mainNode.vm.network "private_network", ip: "#{SUBNET_IP_BASE}.#{50 + i}", :adapter => 2
                virtualbox.name = "#{MAIN_NODE_NAME}-#{i}"
            end
            [:virtualbox, :hyperv].each do |provider|
                mainNode.vm.provider provider do |vm_provider|
                    vm_provider.memory = MAIN_NODE_MEMORY
                    vm_provider.cpus = MAIN_NODE_CPU_COUNT
                end
            end
            mainNode.vm.provider :hyperv do |hyperv|
                hyperv.vmname = "#{MAIN_NODE_NAME}-#{i}"
                hyperv.maxmemory = MAIN_NODE_MEMORY
            end

            mainNode.vm.hostname = "#{MAIN_NODE_NAME}-#{i}"
            if MAIN_NODE_TAINT == false
                mainNode.vm.disk :disk, name: "main-node-cephfs-#{i}", size: "100GB"
            end

            mainNode.vm.provision "baremetal" , type: "ansible" do |ansible|
                ansible.playbook = "ansible/1.1_baremetal.yaml"
            end
            mainNode.vm.provision "cri", type: "ansible" do |ansible|
                ansible.playbook = "ansible/1.2_cri-containerd.yaml"
                ansible.extra_vars = {
                    containerd_version: "#{CONTAINERD_VERSION}"
                }
            end
            mainNode.vm.provision "kubernetes", type: "ansible" do |ansible|
                ansible.playbook = "ansible/1.3_kubernetes.yaml"
                ansible.extra_vars = {
                    kubernetes_version: "#{KUBERNETES_VERSION}"
                }
            end
            mainNode.vm.provision "control-plane", type: "ansible" do |ansible|
                ansible.playbook = "ansible/1.4a_control-plane.yml"
                ansible.extra_vars = {
                    taint: MAIN_NODE_TAINT,
                    node:  "#{MAIN_NODE_NAME}-#{i}",
                    adapter_id: MAIN_NODE_ADAPTER_ID
                }
            end
            mainNode.vm.provision "helm", type: "ansible" do |ansible|
                ansible.playbook = "ansible/1.5_helm.yml"
            end
            
            if i == 1
                mainNode.vm.provision "cni", type: "ansible" do |ansible|
                    ansible.playbook = "ansible/1.6_cni-calico.yml"
                end
                mainNode.vm.provision "csi", type: "ansible" do |ansible|
                    ansible.playbook = "ansible/1.7_csi-rook.yml"
                end
                mainNode.vm.provision "loadbalancer", type: "ansible" do |ansible|
                    ansible.playbook = "ansible/1.8_loadbalancer.yml"
                end
                mainNode.vm.provision "external_dns", type: "ansible" do |ansible|
                    ansible.playbook = "ansible/1.9b_externaldns-coredns.yml"
                end
                mainNode.vm.provision "ingress", type: "ansible" do |ansible|
                    ansible.playbook = "ansible/1.10_ingress.yml"
                end
                mainNode.vm.provision "dashboard", type: "ansible" do |ansible|
                    ansible.playbook = "ansible/1.11_dashboard.yml"
                end
                mainNode.vm.provision "ldap", type: "ansible" do |ansible|
                    ansible.playbook = "ansible/2.1_ldap.yml"
                end
            end
        end
    end

    (1..WORKER_NODE_COUNT).each do |i|
        config.vm.define "#{WORKER_NODE_NAME}-#{i}" do |workerNode|
            workerNode.vm.provider :virtualbox do |virtualbox|
                workerNode.vm.network "private_network", ip: "#{SUBNET_IP_BASE}.#{150 + i}", :adapter => 2
                virtualbox.name = "#{WORKER_NODE_NAME}-#{i}"
            end
            [:virtualbox, :hyperv].each do |provider|
                workerNode.vm.provider provider do |vm_provider|
                    vm_provider.memory = WORKER_NODE_MEMORY
                    vm_provider.cpus = WORKER_NODE_CPU_COUNT
                end
            end
            workerNode.vm.provider :hyperv do |hyperv|
                hyperv.vmname = "#{WORKER_NODE_NAME}-#{i}"
                hyperv.maxmemory = WORKER_NODE_MEMORY
            end

            workerNode.vm.hostname = "#{WORKER_NODE_NAME}-#{i}"
            workerNode.vm.disk :disk, name: "worker-node-cephfs-#{i}", size: "100GB"
            
            workerNode.vm.provision "baremetal" , type: "ansible" do |ansible|
                ansible.playbook = "ansible/1.1_baremetal.yaml"
            end
            workerNode.vm.provision "cri", type: "ansible" do |ansible|
                ansible.playbook = "ansible/1.2_cri-containerd.yaml"
                ansible.extra_vars = {
                    containerd_version: "#{CONTAINERD_VERSION}"
                }
            end
            workerNode.vm.provision "kubernetes", type: "ansible" do |ansible|
                ansible.playbook = "ansible/1.3_kubernetes.yaml"
                ansible.extra_vars = {
                    kubernetes_version: "#{KUBERNETES_VERSION}"
                }
            end
            workerNode.vm.provision "worker_node", type: "ansible" do |ansible|
                ansible.playbook = "ansible/1.4b_worker-node.yml"
            end
        end
    end
end
