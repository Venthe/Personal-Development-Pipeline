---
- name: Install dashboard
  gather_facts: false
  hosts: all
  vars:
    delete_namespace: false
    namespace: dashboard
    debug: false
  tasks:
    - name: "Delete {{ namespace }} namespace"
      command: "kubectl delete namespace {{ namespace }}"
      when: "delete_namespace|bool"
    - name: Add helm repository
      command: helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
      notify: Update helm repository
    - name: Prepare Helm dashboard value customization
      copy:
        dest: "/tmp/values.yaml"
        content: |
          service:
            type: "LoadBalancer"
            annotations:
              external-dns.alpha.kubernetes.io/hostname: "dashboard.example.org"
    - name: Install dashboard manifest
      shell:
        cmd: |
          helm upgrade \
            --install \
            --create-namespace \
            --namespace={{ namespace }} \
            --values=/tmp/values.yaml \
            dashboard \
            kubernetes-dashboard/kubernetes-dashboard
    - name: Prepare manifests
      copy:
        dest: "/tmp/user.yml"
        content: |
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: admin-user
            namespace: dashboard
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: admin-user
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
            - kind: ServiceAccount
              name: admin-user
              namespace: dashboard
      # TODO: Add kustomize with namespace
    - name: Deploy Rook/Ceph cluster
      command: "kubectl apply -f /tmp/user.yml"
      # TODO: Add kustomize with namespace
    - name: Password to dashboard
      shell:
        cmd: |
          kubectl get secret $(kubectl get secret --namespace={{ namespace }} --output=jsonpath="{range .items[*]}{.metadata.name}{'\n'}{end}" | grep admin-user) \
                  --namespace={{ namespace }} \
                  --output=jsonpath="{.data.token}" |
                  awk '{system("echo -n "$1" | base64 --decode")}'
      register: dashboard_password
      when: debug == true
    - name: Show debug info
      when: debug == true
      debug:
        msg: "{{dashboard_password.stdout}}"

  handlers:
    - name: Update helm repository
      include_tasks: _update_helm_repositories.yml
