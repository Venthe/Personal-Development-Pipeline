# RESET
# sudo kubeadm init phase certs all
# sudo ip route flush proto bird
# sudo rm -rf /var/etcd/calico-data/*
# sudo cp /etc/kubernetes/pki/ca.crt /usr/local/share/ca-certificates/kubernetes.crt && sudo update-ca-certificates
- set_fact:
    ip: "{{ item }}"
  with_items: "{{ ansible_all_ipv4_addresses }}"
  when: "item.startswith('192') or item.startswith('172')"
- name: Prepare init configuration
  become: true
  blockinfile:
    create: yes
    backup: yes
    dest: /var/lib/kubelet/config.init.yaml
    block: |
      apiVersion: kubeadm.k8s.io/v1beta2
      kind: ClusterConfiguration
      # --control-plane-endpoint
      controlPlaneEndpoint: {{ ip }}:6443
      ---
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      cgroupDriver: systemd
      memorySwap:
        swapBehavior: LimitedSwap
      featureGates:
        NodeSwap: true
      failSwapOn: false
      networking:
        # --pod-network-cidr
        podSubnet: "10.244.0.0/16"
      localAPIEndpoint:
        # --apiserver-advertise-address
        advertiseAddress: {{ ip }}
        bindPort: 6443
      ...
- name: Restart kubelet
  become: true
  ansible.builtin.service:
    enabled: true
    name: kubelet
    daemon_reload: true
    state: restarted
# # Fixme: Run this only when necessary
# #  kubeadm config images list -o jsonpath='{range .images[*]}{@}{"\n"}{end}'
# #  Store available images as a fact?
#- name: Pull config images
#  become: true
#  command: kubeadm config images pull
# Fixme: Run this only when necessary
- name: Initialize the Kubernetes cluster using kubeadm
  become: true
  # --apiserver-advertise-address="192.168.50.10"
  #  The IP address the API Server will advertise it's listening on.
  #  If not set the default network interface will be used
  # --contorl-plane-endpoint
  #  Specify a stable IP address or DNS name for the control plane.
  # --apiserver-cert-extra-sans="192.168.50.10"
  #  Optional extra Subject Alternative Names (SANs) to use for the API
  #  Server serving certificate. Can be both IP addresses and DNS names.
  # --node-name {{ node }}
  #  Specify the node name.
  # --pod-network-cidr=192.168.0.0/16
  #  Specify range of IP addresses for the pod network. If set, the
  #  control plane will automatically allocate CIDRs for every node.
  # --service-dns-domain="{{ cluster_domain }}" \
  shell:
    #--apiserver-cert-extra-sans="{{ ip }},127.0.0.1,localhost,{{ansible_hostname}}" \
    # --service-cidr=10.196.0.0/16 \
    # calico pod network cidr: 192.168.0.0/16.
    # --apiserver-cert-extra-sans="127.0.0.1" \
    # --apiserver-cert-extra-sans="127.0.0.1" \
    # --apiserver-cert-extra-sans="127.0.0.1" \
    cmd: |
      kubeadm init \
          --config=/var/lib/kubelet/config.init.yaml \
          --node-name={{ ansible_hostname }} \
          --skip-token-print
- name: Create .kube directory for user
  become: true
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0700'
    owner: "{{ ansible_env.LOGNAME }}"
- name: Setup kubeconfig for user
  become: true
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    owner: "{{ ansible_env.LOGNAME }}"
    remote_src: true
    mode: '0700'
- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command
  changed_when: false
  # Change to fetch
- name: Copy join command to local file
  delegate_to: localhost
  become: false
  copy:
    content: "{{ join_command.stdout_lines[0] }}"
    mode: '0777'
    dest: "./join-command"
- name: Untaint node
  command: "kubectl taint node {{ ansible_hostname }} {{ item }}-"
  when: not taint_control_plane
  with_items:
    - node-role.kubernetes.io/control-plane
    - node-role.kubernetes.io/master
