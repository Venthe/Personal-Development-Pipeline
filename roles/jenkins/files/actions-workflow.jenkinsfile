@Library('shared') _

def runOn(environment, body) {
    if (params.EXECUTION_ENVIRONMENT != environment) {
        return
    }
    body.call()
}

def globalExecutor(body) {
    runOn("kubernetes") {
        podTemplate {
            node(POD_LABEL) {
                ansiColor('xterm') {
                    body.call()
                }
            }
        }
    }
    node {
        runOn("docker") {
            docker.image("docker.io/venthe/ubuntu-runner:22.10").inside("--entrypoint=''") {
                ansiColor('xterm') {
                    body.call()
                }
            }
        }
    }
}

def runner(image, body) {
    runOn("kubernetes") {
        podTemplate(yaml: """\
                    apiVersion: v1
                    kind: Pod
                    metadata:
                      annotations:
                        vault.hashicorp.com/agent-inject: "true"
                        vault.hashicorp.com/role: 'readonly-infrastructure'
                        vault.hashicorp.com/agent-inject-secret-nexus: secret/infrastructure/nexus

                        # {%- raw %}
                        vault.hashicorp.com/agent-inject-template-nexus: |
                          {{- with secret "secret/infrastructure/nexus" -}}
                          {
                            "username": "{{.Data.username}}",
                            "password": "{{.Data.password}}"
                          }
                          {{- end }}
                        vault.hashicorp.com/secret-volume-path-nexus: /runner/metadata/secrets
                        vault.hashicorp.com/agent-inject-file-nexus: nexus.json
                        vault.hashicorp.com/agent-inject-secret-docker: secret/infrastructure/docker
                        vault.hashicorp.com/agent-inject-template-docker: |
                          {{- with secret "secret/infrastructure/docker" -}}
                          {
                            "username": "{{.Data.username}}",
                            "password": "{{.Data.password}}"
                          }
                          {{- end }}
                        # {%- endraw %}

                        vault.hashicorp.com/secret-volume-path-docker: /runner/metadata/secrets
                        vault.hashicorp.com/agent-inject-file-docker: docker.json
                    spec:
                      serviceAccountName: admin-user
                      volumes:
                        - name: ca-cert
                          secret:
                            secretName: jenkins-tls
                      containers:
                        - name: runner
                          image: ${image}
                          imagePullPolicy: Always
                          volumeMounts:
                            - mountPath: "/usr/local/share/ca-certificates/kubernetes"
                              name: ca-cert
                              readOnly: true
                          securityContext:
                            privileged: true
                          command:
                            - sleep
                          args:
                            - 9999999""".stripMargin().stripIndent()) {
            node(POD_LABEL) {
                container("runner") {
                    ansiColor('xterm') {
                        body.call()
                    }
                }
            }
        }
    }
    runOn("docker") {
        def volumes = ""
        docker.image(image).inside("""--entrypoint='' --interactive --tty ${volumes}""") {
            ansiColor('xterm') {
                body.call()
            }
        }
    }
}

def runOnNode() {
    sh 'update-ca-certificates'
    sh 'NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt NODE_OPTIONS=--enable-source-maps node /runner/index.js'
}

def prepareEnvFile(workflowFile, jobName) {
    // FIXME: Rewrite as withEnv
    //  With env is not working on docker node?
    writeFile file: "ci.env", text: [
            "VPIPELINE_BUILD_ID"   : "${env.BUILD_ID}",
            "VPIPELINE_GERRIT_URL" : "${params.GERRIT_URL}",
            "VPIPELINE_JOB_NAME"   : "${jobName}",
            "VPIPELINE_NEXUS_URL"  : "http://nexus-nexus-repository-manager.infrastructure:8081/repository/raw-hosted",
            "VPIPELINE_SECRET_NAME": "infrastructure",
            "VPIPELINE_VAULT_URL"  : "http://vault.infrastructure:8200/v1",
            "VPIPELINE_DOCKER_URL" : "docker.home.arpa",
            "VPIPELINE_WORKFLOW"   : "${workflowFile}",
            "GIT_SSH_COMMAND"      : "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
    ].collect { "${it.key}=${it.value}" }
            .join('\n')
    sh "mv ci.env /runner/metadata/env"
}

def prepareWorkflow(workflowFile, input) {
    try {
        println "Parsing workflow: ${workflowFile.toString()}"
        def file = readFile workflowFile.toString()
        def workflow = parseYaml(file)
        if (workflow == null) {
            throw new Exception("Workflow should not be null")
        }

        if (!isHandling(workflowFile.toString(), workflow, input)) {
            return
        }

        def workflowName = workflow['name'] ? "${workflow['name']} - ${workflowFile.name}" : workflowFile.name
        def action = {
            workflow['jobs'].each { jobName, job ->
                runner(job['runs-on']) {
                    cleanWs()
                    unstash 'INPUT'
                    prepareEnvFile(workflowFile.toString(), jobName)
                    withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'gerrit',                    \
                                                                        keyFileVariable: 'SSH_KEY_FOR_ABC',                    \
                                                                        passphraseVariable: '',                    \
                                                                        usernameVariable: '')]) {
                        sh "mkdir -p /root/.ssh && cp ${SSH_KEY_FOR_ABC} /root/.ssh/id_rsa"
                    }
                    sh "chmod u=rwx,g=,o= ~/.ssh/*"
                    sh "mv INPUT /runner/metadata/event.yaml"
                    stage("[${workflow['name']}/${jobName}]") {
                        runOnNode()
                    }
                }
            }
        }
        return ["${workflowName}": action]
    } catch (Exception e) {
        return ["${workflowFile.toString()}": {
            stage("${workflowFile.toString()}") {
                error("File content:\n${readFile(workflowFile.toString())}\n\n${e.getMessage()}\n${printStackTrace(e)}")
            }
        }]
    }
}

def checkoutProperties(project1, branch1, ref1) {
    return [$class           : 'GitSCM',
            branches         : [
                    [name: "${ref1}"]
            ],
            extensions       : [
                    [$class: 'LocalBranch', localBranch: "**"],
                    [$class: 'BuildSingleRevisionOnly'],
                    [$class: 'CloneOption', shallow: true, honorRefspec: true],
                    [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
                            [$class: 'SparseCheckoutPath', path: '.pipeline/']
                    ]]
            ],
            userRemoteConfigs: [
                    [credentialsId: 'gerrit',
                     refspec      : "+${branch1}:refs/remotes/origin/${branch1} +${ref1}:refs/remotes/origin/${ref1}",
                     url          : "${params.GERRIT_URL}/${"${project1}"}"
                    ]
            ]
    ]
}

properties([parameters([
        string(name: 'EXECUTION_ENVIRONMENT', defaultValue: 'kubernetes', description: ''),
        stashedFile(name: 'INPUT', default: null, description: ''),
        // text(name: 'INPUT_TEST', default: null, description: ''),
        string(name: 'GERRIT_URL', defaultValue: '{{ gerrit.sshUrl }}'),
])])

if (params.SEED_JOB != null) {
    currentBuild.result = 'ABORTED'
    currentBuild.displayName = "#${BUILD_NUMBER} Aborted: Seeding job used to register actual parameters"
    error('Stopping earlyâ€¦')
}

globalExecutor {
    def input
    stage("Load input") {
        cleanWs()
        unstash 'INPUT'
        input = readJSON file: "INPUT"
    }
    def workflows
    stage("Prepare workflows") {
        println "Checking out actions"
        def branch1 = "${input['change']['branch']}"
        def ref1 = "${input['patchSet']['ref']}"
        def project1 = "${input['change']['project']}"
        def type1 = "${input['type']}"
        currentBuild.displayName = "#${BUILD_NUMBER} [${project1}] ${type1}: +${branch1}:${ref1}"
        currentBuild.description = "The best description."

        checkout(checkoutProperties(project1, branch1, ref1))
        workflows = findFiles(glob: '.pipeline/workflows/*.y*ml')
                .collect { prepareWorkflow(it, input) }
                .findAll { it != null }
                .collectEntries { it }
        workflows.failFast = false
    }
    stage("Run jobs") {
        parallel workflows
    }
}
