# ansible-galaxy collection install community.general ansible.posix kubernetes.core
---
- name: Prepare for elasticsearch containers
  # gather_facts: true
  hosts: all
  roles:
   - baremetal-elasticsearch
   - baremetal-containerd
   - baremetal-kubernetes
   - cni
   - tools
   - csi
   - loadbalancer
   - externaldns
   - ingress
   - dashboard
   - ldap
   - monitoring
   - certmanager
- name: Deploy Gerrit
  gather_facts: false
  hosts: all
  vars:
    HTTPD_LISTEN_URL: "proxy-https://*:8080/"
    TEMP_DIRECTORY: "/tmp/gerrit"
    LDAP_SERVER: "ldap://openldap"
    LDAP_DC: "dc=home,dc=arpa"
    gerrit:
      release_name: gerrit
      namespace: infrastructure
    tld_hostname: home.arpa
    storageClass: freenas-nfs-csi
  tasks:
    - ansible.builtin.tempfile:
        state: directory
        suffix: certs
      register: tempdir
    - ansible.builtin.git:
        repo: https://github.com/GerritCodeReview/k8s-gerrit.git
        dest: "{{tempdir.path}}"
    - kubernetes.core.helm:
        create_namespace: true
        name: "{{gerrit.release_name}}"
        chart_ref: "{{tempdir.path}}/helm-charts/gerrit"
        release_namespace: "{{ gerrit.namespace }}"
        values: "{{ lookup('template', './values/gerrit-values.yml') | from_yaml }}"
    - kubernetes.core.k8s:
        state: patched
        name: gerrit-gerrit-ingress
        namespace: gerrit
        kind: Ingress
        definition:
          spec:
            rules:
              #- host: ssh.gerrit.home.arpa
              #  http:
              #    paths:
              #    - backend:
              #        service:
              #          name: gerrit-gerrit-service
              #          port:
              #            number: 29418
              #      path: /
              #      pathType: ImplementationSpecific
              - host: gerrit.home.arpa
                http:
                  paths:
                    - backend:
                        service:
                          name: gerrit-gerrit-service
                          port:
                            number: 80
                      path: /
                      pathType: Prefix
            tls:
              - hosts:
                  - gerrit.home.arpa
                #- ssh.gerrit.home.arpa
                secretName: gerrit-tls
    - name: Annotate service with external hostname
      command: |
        kubectl annotate Service {{gerrit.release_name}}-gerrit-service \
          --namespace={{ gerrit.namespace }} \
          --overwrite external-dns.alpha.kubernetes.io/hostname="ssh.{{gerrit.release_name}}.{{tld_hostname}}"
    - ansible.builtin.file:
        path: "{{ tempdir.path }}"
        state: absent
      when: tempdir.path is defined
- name: Deploy Jenkins
  gather_facts: false
  hosts: main
  vars:
    # GERRIT_SERVER: "gerrit-service-gerrit.gerrit"
    tld_hostname: "home.arpa"
    cluster_zone: cluster.local
    jenkins:
      namespace: "infrastructure"
      release_name: "jenkins"
      ldap:
        server: "ldap://openldap"
        root_dn: "dc=home,dc=arpa"
        ldap_user: "readonly"
        jenkins_ldap_username: "jenkins"
  vars_prompt:
    - name: ldap_password
      default: "readonly"
      prompt: Ldap user password
      private: true
    - name: jenkins_ldap_password
      default: "jenkins"
      private: false
  tasks:
    - kubernetes.core.helm_repository:
        name: jenkins
        repo_url: https://charts.jenkins.io
    - kubernetes.core.helm:
        chart_version: "4.2.14"
        create_namespace: true
        update_repo_cache: true
        name: "{{ jenkins.release_name }}"
        chart_ref: jenkins/jenkins
        release_namespace: "{{ jenkins.namespace }}"
        values: "{{ lookup('template', './values/jenkins-values.yml') | from_yaml }}"
    # ssh-keygen -b 2048 -t rsa -f ./sshkey -q -N '' <<<y && ssh-keygen -y -f ./sshkey > ./sshkey.pub
    - name: Generate SSH key
      shell: "ssh-keygen {{item}}"
      args:
        executable: /usr/bin/bash
      with_items:
        - "-b 2048 -t rsa -f {{TEMP_DIRECTORY}}/sshkey -q -N '' <<<y 2>&1 >/dev/null"
        - "-y -f {{TEMP_DIRECTORY}}/sshkey > {{TEMP_DIRECTORY}}/sshkey.pub"
    - name: Create ldap secret
      command: kubectl apply -f {{ TEMP_DIRECTORY }}/ldap-password
    - name: Create gerrit ssh secret
      command: "kubectl create secret generic gerrit-ssh --from-file=ssh-privatekey={{TEMP_DIRECTORY}}/sshkey --namespace={{ namespace }}"
    - name: Add helm repository
      command: helm repo add jenkins https://charts.jenkins.io
    - name: Update helm repositories
      command: helm repo update
    - name: Deploy helm charts
      args:
        executable: /usr/bin/bash
      shell:
        cmd: |
          helm upgrade --install \
            --namespace={{ namespace }} --create-namespace \
            --values={{TEMP_DIRECTORY}}/values.yaml \
            {{ release_name }} \
            jenkins/jenkins
    - name: Create ldap secret
      shell: 'kubectl patch StatefulSet/jenkins --namespace=jenkins --patch "$(cat {{TEMP_DIRECTORY}}/{{item}})"'
      with_items:
        - gerrit-ssh.patch
        - ldap-password.patch
      # Gerrit
    - name: Create jenkins basicauth
      command: "printf 'Authorization: Basic {{ (jenkins_ldap_username + jenkins_ldap_password) | string | b64encode }}'"
      register: basic_auth
    - name: Get public key
      command: "cat {{TEMP_DIRECTORY}}/sshkey.pub"
      register: sshkey_pub
    - name: Act on gerrit
      command: "curl --request POST --show-error --header 'Authorization: Basic {{basic_auth.stdout}}' --header 'Content-Type: {{item.header}}' --data '{{item.data}}' https:/gerrit.{{ domain }}/{{item.url}}"
      with_items:
        - header: application:x-www-form-urlencoded
          data: username={{jenkins_ldap_username}}&password={{jenkins_ldap_password}}
          url: login
        - header: text/plain
          data: "{{sshkey_pub.stdout}}"
          url: a/accounts/self/sshkeys
    - name: Clean temp path
      become: true
      file:
        state: absent
        path: "{{ TEMP_DIRECTORY }}"
- name: Deploy services
  gather_facts: false
  hosts: main
  vars:
    ldap:
      server: openldap
      port: "389"
    tld_hostname: home.arpa
    infrastructure:
      namespace: "infrastructure"
  tasks:
    - name: Install ArgoCD
      vars:
        argocd:
          namespace: "{{infrastructure.namespace}}"
      include_role:
        name: argocd

## CERTS=/opt/bitnami/etcd/certs/client; etcdctl --cacert=${CERTS}/ca.pem --key=${CERTS}/client-key.pem --cert=${CERTS}/client.pem get / --prefix
