# ansible-galaxy collection install community.general ansible.posix kubernetes.core
---
- name: Prepare for elasticsearch containers
  # gather_facts: true
  hosts: all
  roles:
   - baremetal-elasticsearch
   - baremetal-containerd
   - baremetal-kubernetes
   - cni
   - tools
   - csi
   - loadbalancer
- name: Install ExternalDNS (mDNS)
  gather_facts: false
  hosts: main-mdns
  tasks:
    - name: Install Avahi
      become: true
      apt:
        name: "avahi-daemon"
        update_cache: yes
    - name: 'Install External DNS: mDND manifest'
      command: kubectl apply -f https://raw.githubusercontent.com/tsaarni/k8s-external-mdns/master/external-dns-with-avahi-mdns.yaml
- name: Install ExternalDNS (CoreDNS)
  gather_facts: false
  hosts: "main-coredns"
  vars:
    externaldns:
      namespace: infrastructure
    tld_hostname: home.arpa
  tasks:
    - name: "Create namespace"
      k8s:
        state: present
        kind: Namespace
        name: "{{ externaldns.namespace }}"
        api_version: v1
    - kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: etcd-client-tls
            namespace: "{{ externaldns.namespace }}"
          data:
           # CFSSL Docker image
            client.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR6RENDQXJTZ0F3SUJBZ0lVUVEyTW5vY1RCSEcxaE5NSmYzNHVXclpwSnpRd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1N6RU1NQW9HQTFVRUJoTURTVTVVTVE0d0RBWURWUVFJRXdWRWRXMXRlVEVPTUF3R0ExVUVCeE1GUkhWdApiWGt4R3pBWkJnTlZCQU1URWt4dlkyRnNJR05zZFhOMFpYSWdSVlJEUkRBZUZ3MHlNakV3TURZeU1UQXhNREJhCkZ3MHpNakV3TURNeU1UQXhNREJhTUE4eERUQUxCZ05WQkFNVEJISnZiM1F3Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMvRTBhSDkwNmdLWENyeUJkcmtTOHNLUlZscEJIN2JUem1kMmpMQVZIQgozYWZhNGlpTENkTkk4NnNlWDFLRElHUkdWdHdmYUVqcTNGL01ZTlRWYWlJS2VBbTA1S2ZsRmQySzNIOUk4OEUwCjRFY0RTdUJaSHFYQW5NVkFEZ2RBS0U4Yms2MHkzeDFBTE84UjNmL2krbVFXcWl3Zzg4Z3VLQ3R5aExrMU9vSnMKeS9LZjJqQlJTODVjOUt2K3V5WHNqNVFmc0hZY25CQzJpY3dacWtzTkpwQ01SZnN3QUdzeVZ5NXJwOUJHQ3IrdwpFZ1hqUktaVVZGZVdJZ05weGorQTdhVjJFbXQzMW5RVU9FMEo5a1dGOWRKVldheVFhb0huNnBSUVU5dHlLTzhlCnhGTEErMHN5Mk5LRzhabm5EUFZrUmRBenpQbGk5bzBtdkQ2bWVTK21LU290QWdNQkFBR2pnZU13Z2VBd0RnWUQKVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVgpIUk1CQWY4RUFqQUFNQjBHQTFVZERnUVdCQlRmZXY4ZUoyQzFZUHJESm5DaVhoLzFUQXErdHpBZkJnTlZIU01FCkdEQVdnQlNVajdIbUJGOVIwSVVveDYzQ2NWS2cvNkxmckRCaEJnTlZIUkVFV2pCWWdnUmxkR05rZ2cxbGRHTmsKTFdobFlXUnNaWE56Z2dsc2IyTmhiR2h2YzNTQ01Db3VaWFJqWkMxb1pXRmtiR1Z6Y3k1cGJtWnlZWE4wY25WagpkSFZ5WlM1emRtTXVZMngxYzNSbGNpNXNiMk5oYkljRWZ3QUFBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBCk9wNXgzR3JlMHFLUjNFU1FjNkpUM1BTS0JwZHptZnFhMW9YaEIwbXdCdExtb004YTI4ZFRyaVRPaXV5bXpuQ0cKdXZYSVliNS9idjlXYmVSK0JYM3d2Wk5uR1ZRd29zUEJrN25EOGFoRno4UXcrVHUzV1VOMjJidEZMYVBiWUtjQgpZNzdVRUVIMk4xTWpWRURURlhwcWNqZ1lHMGJhZFRSNEhmTzZ4L01ySmh2TXZlczFwUlB6TDltd0R3eVBuVkNlCkp5Q3plWUlyQlVJNVBhVHlEYmpaMWxudmNwSTFZRUZwQllyMjN0SUg4bkRjNHR0cWNmeE9XOSsvTURCVkJ2Z0UKdENYbHA0SHowSkxNUi8vUGFCMktleUpZVWkvWnd2TVp4RGVTUnFCcjdLekc2dzM2RnFFQVN1WlFOOUFaZHdtZgpRRDd5ZytDOExUOHIwUUFidTA4TDhBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
            ca.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURaakNDQWs2Z0F3SUJBZ0lVZWY5NjRVYzB1QzA5YVJkdmROaHRhUTVtVlhzd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1N6RU1NQW9HQTFVRUJoTURTVTVVTVE0d0RBWURWUVFJRXdWRWRXMXRlVEVPTUF3R0ExVUVCeE1GUkhWdApiWGt4R3pBWkJnTlZCQU1URWt4dlkyRnNJR05zZFhOMFpYSWdSVlJEUkRBZUZ3MHlNakV3TURZeU1UQXhNREJhCkZ3MHlOekV3TURVeU1UQXhNREJhTUVzeEREQUtCZ05WQkFZVEEwbE9WREVPTUF3R0ExVUVDQk1GUkhWdGJYa3gKRGpBTUJnTlZCQWNUQlVSMWJXMTVNUnN3R1FZRFZRUURFeEpNYjJOaGJDQmpiSFZ6ZEdWeUlFVlVRMFF3Z2dFaQpNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNyUjJ3VGZRYnZqaTY3ejVrQ1c0MkkrK2F2CllaZFlueEg4TGlxeFQ1cDVZZWl5ekUyTEdYNGhtT2kzaXBFenBsQ1IwTHN3T0VQYWtqWW5BR3VpclBrYzc2VW8KUkh1TEMydXZzV21MR2Y2OVlTVEZOUjhSTllJY09xZ3Nrb3ZyVkNpL3NiRTNlRDhVNEhHUGtLSTRBWjFsZXJMcwpkZmMxUWttMkY2NzkrQkhQSlR6V0dSR0FGaEtPR05ROHNlNVhPdXZTamJoZms5ZlY3U1ZmUFkwTlpvbzRXWlZhCjZodUI0MmNPbEV4S3dGdG8wbCtzWTJNWU55K3hMU29ydUwxazJUenA0RnM5SmZhRHVvdU81K2I3MS9wdmVqSWoKZ2s0RFJDU0hBU2xjNDdER1pGQTMxSTNZZkw3ajJXUlRNQTV0aEhDK1lCK1FGMnBFd25QVHFicUtpTHdQQWdNQgpBQUdqUWpCQU1BNEdBMVVkRHdFQi93UUVBd0lCQmpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXCkJCU1VqN0htQkY5UjBJVW94NjNDY1ZLZy82TGZyREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBQnQ2bEdtcUEKaEZFYk5Eb2hoLzgyeWl2eVpkWmFadTlTVEJxUzA1SVBnd3FXWlBWeml0SHd2TXoxNXpSeHpCaUxDaDhrMUU1WQo1ZkNkSVZrcTVhVEhVYzNrWTlOaDFEV1gyTEoyNGl6MHY5NjYwUDRwSkxGbHdpbStuRnJvd1IrQUNxZkZGVTNPCnBOV045ZlpKNGMwcDdseE84L1psSUpGaDlOdi9pVDhvMTcxa3VMQ0JQL0FZRklTTnNmd1pNYjVIczNhVGtCR0IKaVNKWDVhZG1kVWEzWGdRZzVXV1MxUVd6L0hiTUx5VFp3VVR6bDhnRU9GSE5SNHpnajRLZ0hxblVFc3d1V2NDRQowcGczeEZxRGtRdklqZDFMdTV5MGQ5NEhtcWZhcjdZbktJVXVXQ2tiNHN4dnF5VHBBb0tYdW5hdjV1TW42VElOClpEbnozamJiL1o0aWlRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
            client-key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBdnhOR2gvZE9vQ2x3cThnWGE1RXZMQ2tWWmFRUisyMDg1bmRveXdGUndkMm4ydUlvCml3blRTUE9ySGw5U2d5QmtSbGJjSDJoSTZ0eGZ6R0RVMVdvaUNuZ0p0T1NuNVJYZGl0eC9TUFBCTk9CSEEwcmcKV1I2bHdKekZRQTRIUUNoUEc1T3RNdDhkUUN6dkVkMy80dnBrRnFvc0lQUElMaWdyY29TNU5UcUNiTXZ5bjlvdwpVVXZPWFBTci9yc2w3SStVSDdCMkhKd1F0b25NR2FwTERTYVFqRVg3TUFCck1sY3VhNmZRUmdxL3NCSUY0MFNtClZGUlhsaUlEYWNZL2dPMmxkaEpyZDlaMEZEaE5DZlpGaGZYU1ZWbXNrR3FCNStxVVVGUGJjaWp2SHNSU3dQdEwKTXRqU2h2R1o1d3oxWkVYUU04ejVZdmFOSnJ3K3Bua3ZwaWtxTFFJREFRQUJBb0lCQVFDSytNZ0p5RE9saGI1dgpFbjhHTzNobDFCTzk4MUVvMzFDMkJ3OXU1eXpCcGllWnFYZjNlRlAxOFZQNktUWm9MTDBCODlieCtQVmY3Snk0Cmw0ejFFOVppYXVBVWMySXgybTlodWZIUjY0Z1FuemJIREVTVVRSZ2RPV2kxcC81YUNYZFFCVjZwYTJGbzljV0QKNTBWZm51SUJJaEFxZjJTUFBhUXNES0J3T0hmNERETUx0OEEweXVDRVFvNis4a0xCM2tLczErTk1aMENDbEg3ZQpMVktscjBhUWFKdlA2WTFMaTlrdmp5bUdiWEFOZy9XRzRHRTRoeklINDhTR3BZd0doeVBBUVgwaWx2SmxPL3J5Cnd3Zm92RnZmQTRaN1ZVN2o5UnlxK0FEaytnYXJPckdXSzRHdFV2bnV4K2VOcW40ZkJrdjFoSjZ3Y2VNSGFvaG0KTHA1VENaL0JBb0dCQU1vcFBkUDRLQmR4YXl6SDJxRTZGeTFqTWVPYzUzTHJ4blhhb0VZdCtzRkxHYzQ1R3ltdwprOFpHbU16S1NUaE5mYmd4UzhyRGpwVDdSU0RhVjZHYWpDTzVuNzJPaUwzOUhUVVFMblV3dk5URE8wZ2Fpd3hBCm5aSTBKNFZtQlBLaHNoSDFGUFBkOXAyZ0JzWDUxZXQrRTY3THJ2NkJiQ3ZCcmtiaU5XWEJXL1NaQW9HQkFQSDIKUEdXN3QrVmUzS0ZKN1VmZUsvRG9hYnV3eW5MaGlrZ1FZSjlocXo2TVNxdFlWWktEUUE2VFNQMXFyc1dTbldWWAo0bWhaS1hnOGdDbTFpczh6M1BlUDE4MWZYS2gxWEJRRTFXTW9rYk5YRzlFenJMb0ppcTZiSEk3SFBYL0FxT0FoClFZRVp0MmYzemIwQnV4ZzkxKzM2VTNpYWZtZ1hJNFFlN1hVTW1VcTFBb0dCQUpmajFLaG1VdmtLSmxSRzlHVWUKbUR0cHhCb1gwVzN1NS9XMGhhYzA5S28yR3ZWdXdwSFlNYTlQYTQ2eWpjRFh1QldrTkNYc09EeUhiYkQ1VzgzMwpxRU5QUEUzWHdiVzlieXhuTkFDbzFiZWwxK3ljeE13MzRDdnhNNkJ1dmxqdVZEUlp4NXhTc1BCTlE4bUxwTWFDCnU1Y2hRaUhHYTllVWRiU2NVVEphelJSQkFvR0JBTTZxbkZIa3NhRUhrbmxzOUcvak16TDB3SUxnOFRxSXJCejcKYUJ3YVJ6TUlqeXFsSzRvVjh4dS83Nk1NZ1RVZUVyUWlDYTlKSU9PakFYRWVyKzVsQlFLcTZROXd1V3JsdXYwYQpWOHozTk9PeXJuN1VuVjdWa1krcnl3dWs0RUdESkhzenpJaGhsOGNFNE1Ua2VwS3RHQWNiUGpxUDh4SWpXV0diCkxRVkIrcGpWQW9HQkFMa0Z4SFFGbmhKSXBGMXNIZFNVeFNpT2RMcWRvUmdoQnNvRUV6Tlp5Mm1hZk9kTzBLbXoKaVNxTEREdDQ4NnN5Qzh5TXlwcDJZTkdUTmZqSDUrZ1cwTEs5czRGNHc2eEl4ZWxtWE01RmVST1FDQ2NVT29ycgpnbTBkaGxrMGZGcXZZdG5oU0VYMXdwUFd2Q2RLdTJGQ0RWQVZXOFVzdk43K3VjUVQrQWxZMFVCVQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
    - kubernetes.core.helm_repository:
        name: "{{ item.name }}"
        repo_url: "{{ item.repo }}"
      with_items:
        - name: bitnami
          repo: https://charts.bitnami.com/bitnami
        - name: coredns
          repo: https://coredns.github.io/helm
    - kubernetes.core.helm:
        name: dummy
        namespace: kube-system
        state: absent
        update_repo_cache: true
    - kubernetes.core.helm:
        name: "{{ item.name }}"
        create_namespace: true
        chart_ref: "{{ item.chart }}"
        release_namespace: "{{ externaldns.namespace }}"
        values: "{{ lookup('template', './values/external-dns-' + item.value + '.yml') | from_yaml }}"
      with_items:
        - value: coredns
          chart: coredns/coredns
          name: coredns
        - value: external-dns
          chart: bitnami/external-dns
          name: external-dns
        - value: etcd
          chart: bitnami/etcd
          name: etcd
    - kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            namespace: "{{ externaldns.namespace }}"
            name: external-dns-public
            annotations:
              kubernetes.io/ingress.class: nginx
          spec:
            type: LoadBalancer
            ports:
              - port: 53
                targetPort: 53
                protocol: UDP
                name: udp
            selector:
              app.kubernetes.io/name: coredns
    # Rewrite as Ansible
    - ansible.builtin.shell: |
        #!/bin/bash
        mkdir /tmp/coredns
        kubectl get \
            --namespace=kube-system \
            --output=jsonpath='{.data.Corefile}' \
            configmap/coredns  \
            > /tmp/coredns/Corefile
        echo "{{ tld_hostname }}:53 {
            errors
            cache 30
            forward . $(kubectl get service \
              --namespace="{{ externaldns.namespace }}" \
              --output=jsonpath='{.status.loadBalancer.ingress[0].ip}' \
              external-dns-public)
        }" >> /tmp/coredns/Corefile
        kubectl patch \
            --namespace=kube-system \
            configmap/coredns \
            --patch="{\"data\":{\"Corefile\":\"$(cat /tmp/coredns/Corefile | awk -v ORS='\\n' '1')\"}}"
        rm -rf /tmp/coredns
- name: Install ingress
  gather_facts: false
  hosts: main
  vars:
    tld_hostname: home.arpa
    ingress_namespace: infrastructure
    ingress_release: ingress
    ingress_repository:
      name: ingress-nginx
      url: https://kubernetes.github.io/ingress-nginx
  tasks:
    - kubernetes.core.helm_repository:
        name: "{{ingress_repository.name}}"
        repo_url: "{{ingress_repository.url}}"
    - name: Install ingress
      kubernetes.core.helm:
        update_repo_cache: true
        name: "{{ingress_release}}"
        create_namespace: true
        chart_ref: "{{ingress_repository.name}}/ingress-nginx"
        release_namespace: "{{ ingress_namespace }}"
    - name: Instructions
      debug:
        msg: |
          To use, add the annotation to ingress
            kubernetes.io/ingress.class: nginx
            external-dns.alpha.kubernetes.io/hostname: "{{ tld_hostname }}"
- name: Install dashboard
  gather_facts: false
  hosts: main
  vars:
    dashboard:
      namespace: infrastructure
      name: dashboard
    tld_hostname: home.arpa
  tasks:
    - kubernetes.core.helm_repository:
        name: kubernetes-dashboard
        repo_url: https://kubernetes.github.io/dashboard/
    - kubernetes.core.helm:
        update_repo_cache: true
        name: "{{ dashboard.name }}"
        create_namespace: true
        chart_ref: kubernetes-dashboard/kubernetes-dashboard
        release_namespace: "{{ dashboard.namespace }}"
        values: "{{ lookup('template', './values/dashboard-values.yaml') | from_yaml }}"
    # Ingress is not namespaced in the helm chart
    - kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            annotations:
              cert-manager.io/cluster-issuer: ca-issuer
              kubernetes.io/ingress.class: nginx
              nginx.ingress.kubernetes.io/backend-protocol: HTTPS
              service.alpha.kubernetes.io/app-protocols: '{"https":"HTTPS"}'
            name: "dashboard-kubernetes-dashboard"
            namespace: "{{ dashboard.namespace }}"
          spec:
            rules:
              - host: "{{ dashboard.name }}.{{ tld_hostname }}"
                http:
                  paths:
                    - backend:
                        service:
                          name: "dashboard-kubernetes-dashboard"
                          port:
                            number: 443
                      path: /
                      pathType: ImplementationSpecific
            tls:
              - hosts:
                  - "{{ dashboard.name }}.{{ tld_hostname }}"
                secretName: "dashboard-tls"
        state: present
    - kubernetes.core.k8s:
        definition: "{{ lookup('template', './values/dashboard-user-{{ item }}.yaml') | from_yaml }}"
        state: present
      with_items:
        - crb
        - sa
    - name: Password to dashboard
      shell:
        cmd: "kubectl -n {{ dashboard.namespace }} create token admin-user"
      register: dashboard_password
    - debug:
        msg: "{{dashboard_password.stdout}}"
# TODO: Make ldap declarative
- name: Deploy LDAP
  gather_facts: true
  hosts: main
  vars:
    LDAP_BASE_DN: "{{'{{ LDAP_BASE_DN }}'}}"
    LDAP_DOMAIN: "{{'{{ LDAP_DOMAIN }}'}}"
    LDAP_READONLY_USER_USERNAME: "{{'{{ LDAP_READONLY_USER_USERNAME }}'}}"
    LDAP_READONLY_USER_PASSWORD_ENCRYPTED: "{{'{{ LDAP_READONLY_USER_PASSWORD_ENCRYPTED }}'}}"
    tld_hostname: home.arpa
    ldap:
      ldif: "{{ lookup('template', './values/ldap.ldif') }}"
      namespace: infrastructure
      organization: "My Company"
      openldap:
        releaseName: openldap
      phpldapadmin:
        releaseName: phpldapadmin
  vars_prompt:
    - name: admin_password
      default: "secret"
      private: yes
      prompt: Ldap admin password
  tasks:
    - kubernetes.core.helm_repository:
        name: "{{ item.name }}"
        repo_url: "{{ item.url }}"
      with_items:
        - name: stable
          url: https://charts.helm.sh/stable
        - name: cetic
          url: https://cetic.github.io/helm-charts
    - kubernetes.core.helm:
        name: dummy
        namespace: kube-system
        state: absent
        update_repo_cache: true
    - kubernetes.core.helm:
        name: "{{ item.name }}"
        create_namespace: true
        chart_ref: "{{ item.chartRef }}"
        release_namespace: "{{ ldap.namespace }}"
        values: "{{ lookup('template', './values/ldap-{{ item.name }}.yml') | from_yaml }}"
      with_items:
        - name: "{{ ldap.phpldapadmin.releaseName }}"
          chartRef: cetic/phpldapadmin
        - name: "{{ ldap.openldap.releaseName }}"
          chartRef: stable/openldap
    - kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: phpldapadmin-ingress
            namespace: "{{ ldap.namespace }}"
            annotations:
              kubernetes.io/ingress.class: "nginx"
              cert-manager.io/cluster-issuer: ca-issuer
          spec:
            rules:
              - host: "ldap-admin.{{ tld_hostname }}"
                http:
                  paths:
                    - backend:
                        service:
                          name: "{{ ldap.phpldapadmin.releaseName }}"
                          port:
                            number: 80
                      pathType: ImplementationSpecific
            tls:
              - hosts:
                  - "ldap-admin.{{ tld_hostname }}"
                secretName: ldap-admin-tls
- name: Deploy monitoring
  gather_facts: false
  hosts: main
  vars:
    monitoring:
      namespace: infrastructure
    opensearch:
      opensearch-dashboards:
        name: opensearch
    tld_hostname: home.arpa
  tasks:
    - kubernetes.core.helm_repository:
        name: "{{ item.name }}"
        repo_url: "{{ item.url }}"
      with_items:
        - name: grafana
          url: https://grafana.github.io/helm-charts
        - name: loki
          url: https://grafana.github.io/loki/charts
        - name: prometheus-community
          url: https://prometheus-community.github.io/helm-charts
        - name: opensearch
          url: https://opensearch-project.github.io/helm-charts
    - kubernetes.core.helm:
        name: dummy
        namespace: kube-system
        state: absent
        update_repo_cache: true
    - kubernetes.core.helm:
        name: "{{ item.release_name }}"
        create_namespace: true
        chart_ref: "{{ item.repository }}"
        release_namespace: "{{ monitoring.namespace }}"
        values: "{{ lookup('template', './values/monitoring-{{ item.release_name }}.yaml') | from_yaml }}"
      with_items:
        - release_name: grafana
          repository: grafana/grafana
        - release_name: loki
          repository: loki/loki
        - release_name: prometheus
          repository: prometheus-community/prometheus
        - release_name: promtail
          repository: loki/promtail
        - release_name: "opensearch"
          repository: "opensearch/opensearch"
        - release_name: opensearch-dashboards
          repository: "opensearch/opensearch-dashboards"
    # TODO: Handle ingress for prometheus via Helm chart
    - kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: grafana
            namespace: "{{ monitoring.namespace }}"
            annotations:
              kubernetes.io/ingress.class: "nginx"
              cert-manager.io/cluster-issuer: ca-issuer
          spec:
            tls:
              - hosts:
                  - "grafana.{{ tld_hostname }}"
                secretName: "grafana-tls"
            rules:
              - host: "grafana.{{ tld_hostname }}"
                http:
                  paths:
                    - backend:
                        service:
                          name: grafana
                          port:
                            number: 80
                      pathType: ImplementationSpecific
- name: Deploy cert manager
  gather_facts: true
  hosts: main
  vars:
    INTERMEDIATE_CA_FILENAME: company-intermediate-ca
    certmanager:
      namespace: "infrastructure"
      name: cert-manager
  tasks:
    - kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io
    - kubernetes.core.helm:
        create_namespace: true
        update_repo_cache: true
        name: "{{ certmanager.name }}"
        chart_ref: jetstack/cert-manager
        release_namespace: "{{ certmanager.namespace }}"
        values:
          installCRDs: true
    - kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: ca-issuer
            namespace: "{{ certmanager.namespace }}"
          spec:
            ca:
              secretName: ca-key-pair
    - name: Create temporary build directory
      ansible.builtin.tempfile:
        state: directory
        suffix: certs
      register: tempdir
    # Rewrite as Ansible
    - become: true
      ansible.builtin.shell:
        chdir: "{{ tempdir.path }}"
        cmd: |
          #!/bin/bash

          set -e

          CA_PATH="/etc/kubernetes/pki"

          # Generate key for intermediate CA
          #  -aes256 to protect it with passphrase
          openssl genrsa -out "{{INTERMEDIATE_CA_FILENAME}}.key" 4096

          cat <<EOF > openssl.cnf
          [req]
          req_extensions = v3_req
          # req_extensions = v3_intermediate_ca
          # x509_extensions = v3_req
          x509_extensions = v3_intermediate_ca
          distinguished_name = req_distinguished_name
          prompt = no

          [ v3_req ]
          extendedKeyUsage = serverAuth, clientAuth, codeSigning, emailProtection
          basicConstraints = critical,CA:TRUE
          keyUsage = nonRepudiation, digitalSignature, keyEncipherment

          [req_distinguished_name]
          countryName            = PL
          stateOrProvinceName    = Mazovia
          localityName           = Pruszkow
          organizationName       = Home
          commonName             = home.arpa intermediate CA
          emailAddress           = jacek.lipiec.bc@gmail.com

          [ v3_intermediate_ca ]
          subjectKeyIdentifier = hash
          authorityKeyIdentifier = keyid:always,issuer
          basicConstraints = critical,CA:true,pathlen:0
          keyUsage = critical,digitalSignature,cRLSign, keyCertSign
          EOF

          # Generate itermediate CSR for home.arpa
          openssl req \
              -config openssl.cnf \
              -new \
              -sha256 \
              -newkey rsa:2048 \
              -nodes \
              -key "{{INTERMEDIATE_CA_FILENAME}}.key" \
              -out "{{INTERMEDIATE_CA_FILENAME}}.csr"

          # Sign request with kubernetes
          openssl x509 \
              -req \
              -in "{{INTERMEDIATE_CA_FILENAME}}.csr" \
              -CA "${CA_PATH}/ca.crt" \
              -CAkey "${CA_PATH}/ca.key" \
              -extensions v3_intermediate_ca \
              -CAcreateserial \
              -extfile openssl.cnf \
              -out "{{INTERMEDIATE_CA_FILENAME}}.crt" \
              -days 500 \
              -sha512

          cat "{{INTERMEDIATE_CA_FILENAME}}.crt" "${CA_PATH}/ca.crt" > chain.crt
          chown {{ansible_env.LOGNAME}} chain.crt "{{INTERMEDIATE_CA_FILENAME}}.key"
    - ansible.builtin.shell:
        chdir: "{{ tempdir.path }}"
        cmd: |
          kubectl create secret generic \
              --namespace "{{ certmanager.namespace }}" \
              ca-key-pair \
              --from-file=tls.crt=./chain.crt \
              --from-file=tls.key={{INTERMEDIATE_CA_FILENAME}}.key
    - name: Use the registered var and the file module to remove the temporary file
      ansible.builtin.file:
        path: "{{ tempdir.path }}"
        state: absent
      when: tempdir.path is defined
- name: Deploy Gerrit
  gather_facts: false
  hosts: all
  vars:
    HTTPD_LISTEN_URL: "proxy-https://*:8080/"
    TEMP_DIRECTORY: "/tmp/gerrit"
    LDAP_SERVER: "ldap://openldap"
    LDAP_DC: "dc=home,dc=arpa"
    gerrit:
      release_name: gerrit
      namespace: infrastructure
    tld_hostname: home.arpa
    storageClass: freenas-nfs-csi
  tasks:
    - ansible.builtin.tempfile:
        state: directory
        suffix: certs
      register: tempdir
    - ansible.builtin.git:
        repo: https://github.com/GerritCodeReview/k8s-gerrit.git
        dest: "{{tempdir.path}}"
    - kubernetes.core.helm:
        create_namespace: true
        name: "{{gerrit.release_name}}"
        chart_ref: "{{tempdir.path}}/helm-charts/gerrit"
        release_namespace: "{{ gerrit.namespace }}"
        values: "{{ lookup('template', './values/gerrit-values.yml') | from_yaml }}"
    - kubernetes.core.k8s:
        state: patched
        name: gerrit-gerrit-ingress
        namespace: gerrit
        kind: Ingress
        definition:
          spec:
            rules:
              #- host: ssh.gerrit.home.arpa
              #  http:
              #    paths:
              #    - backend:
              #        service:
              #          name: gerrit-gerrit-service
              #          port:
              #            number: 29418
              #      path: /
              #      pathType: ImplementationSpecific
              - host: gerrit.home.arpa
                http:
                  paths:
                    - backend:
                        service:
                          name: gerrit-gerrit-service
                          port:
                            number: 80
                      path: /
                      pathType: Prefix
            tls:
              - hosts:
                  - gerrit.home.arpa
                #- ssh.gerrit.home.arpa
                secretName: gerrit-tls
    - name: Annotate service with external hostname
      command: |
        kubectl annotate Service {{gerrit.release_name}}-gerrit-service \
          --namespace={{ gerrit.namespace }} \
          --overwrite external-dns.alpha.kubernetes.io/hostname="ssh.{{gerrit.release_name}}.{{tld_hostname}}"
    - ansible.builtin.file:
        path: "{{ tempdir.path }}"
        state: absent
      when: tempdir.path is defined
- name: Deploy Jenkins
  gather_facts: false
  hosts: main
  vars:
    # GERRIT_SERVER: "gerrit-service-gerrit.gerrit"
    tld_hostname: "home.arpa"
    cluster_zone: cluster.local
    jenkins:
      namespace: "infrastructure"
      release_name: "jenkins"
      ldap:
        server: "ldap://openldap"
        root_dn: "dc=home,dc=arpa"
        ldap_user: "readonly"
        jenkins_ldap_username: "jenkins"
  vars_prompt:
    - name: ldap_password
      default: "readonly"
      prompt: Ldap user password
      private: true
    - name: jenkins_ldap_password
      default: "jenkins"
      private: false
  tasks:
    - kubernetes.core.helm_repository:
        name: jenkins
        repo_url: https://charts.jenkins.io
    - kubernetes.core.helm:
        chart_version: "4.2.14"
        create_namespace: true
        update_repo_cache: true
        name: "{{ jenkins.release_name }}"
        chart_ref: jenkins/jenkins
        release_namespace: "{{ jenkins.namespace }}"
        values: "{{ lookup('template', './values/jenkins-values.yml') | from_yaml }}"
    # ssh-keygen -b 2048 -t rsa -f ./sshkey -q -N '' <<<y && ssh-keygen -y -f ./sshkey > ./sshkey.pub
    - name: Generate SSH key
      shell: "ssh-keygen {{item}}"
      args:
        executable: /usr/bin/bash
      with_items:
        - "-b 2048 -t rsa -f {{TEMP_DIRECTORY}}/sshkey -q -N '' <<<y 2>&1 >/dev/null"
        - "-y -f {{TEMP_DIRECTORY}}/sshkey > {{TEMP_DIRECTORY}}/sshkey.pub"
    - name: Create ldap secret
      command: kubectl apply -f {{ TEMP_DIRECTORY }}/ldap-password
    - name: Create gerrit ssh secret
      command: "kubectl create secret generic gerrit-ssh --from-file=ssh-privatekey={{TEMP_DIRECTORY}}/sshkey --namespace={{ namespace }}"
    - name: Add helm repository
      command: helm repo add jenkins https://charts.jenkins.io
    - name: Update helm repositories
      command: helm repo update
    - name: Deploy helm charts
      args:
        executable: /usr/bin/bash
      shell:
        cmd: |
          helm upgrade --install \
            --namespace={{ namespace }} --create-namespace \
            --values={{TEMP_DIRECTORY}}/values.yaml \
            {{ release_name }} \
            jenkins/jenkins
    - name: Create ldap secret
      shell: 'kubectl patch StatefulSet/jenkins --namespace=jenkins --patch "$(cat {{TEMP_DIRECTORY}}/{{item}})"'
      with_items:
        - gerrit-ssh.patch
        - ldap-password.patch
      # Gerrit
    - name: Create jenkins basicauth
      command: "printf 'Authorization: Basic {{ (jenkins_ldap_username + jenkins_ldap_password) | string | b64encode }}'"
      register: basic_auth
    - name: Get public key
      command: "cat {{TEMP_DIRECTORY}}/sshkey.pub"
      register: sshkey_pub
    - name: Act on gerrit
      command: "curl --request POST --show-error --header 'Authorization: Basic {{basic_auth.stdout}}' --header 'Content-Type: {{item.header}}' --data '{{item.data}}' https:/gerrit.{{ domain }}/{{item.url}}"
      with_items:
        - header: application:x-www-form-urlencoded
          data: username={{jenkins_ldap_username}}&password={{jenkins_ldap_password}}
          url: login
        - header: text/plain
          data: "{{sshkey_pub.stdout}}"
          url: a/accounts/self/sshkeys
    - name: Clean temp path
      become: true
      file:
        state: absent
        path: "{{ TEMP_DIRECTORY }}"
- name: Deploy services
  gather_facts: false
  hosts: main
  vars:
    ldap:
      server: openldap
      port: "389"
    tld_hostname: home.arpa
    infrastructure:
      namespace: "infrastructure"
  tasks:
    - name: Install ArgoCD
      vars:
        argocd:
          namespace: "{{infrastructure.namespace}}"
      include_role:
        name: argocd

## CERTS=/opt/bitnami/etcd/certs/client; etcdctl --cacert=${CERTS}/ca.pem --key=${CERTS}/client-key.pem --cert=${CERTS}/client.pem get / --prefix
